Namespace(global_settings=Namespace(data_path='./data/img_align_celeba1000', data_path_KPM='./data/KPM_Fasilkom_UNSRI_2018/KPM_Fasilkom_2018', attr_path='./data/list_attr_celeba1000.txt', results_path='./results', results_path_FasilkomUnsri='./data/img_fasilkomUnsri18_ready', img_size=256, num_test=500, gpu=1, universal_perturbation_path='./perturbation.pt', batch_size=1), attacks=Namespace(momentum=0.5, epsilon=0.05, k=10, universal=1, a=0.01, star_factor=1, attention_factor=1, att_factor=1, HiSD_factor=1), AttGAN=Namespace(attgan_experiment_name='256_shortcut1_inject0_none', attgan_test_int=1.0, attgan_load_epoch='latest', attgan_multi_gpu=0), stargan=Namespace(c_dim=5, c2_dim=8, celeba_crop_size=178, rafd_crop_size=256, image_size=256, g_conv_dim=64, d_conv_dim=64, g_repeat_num=6, d_repeat_num=6, lambda_cls=1, lambda_rec=10, lambda_gp=10, resume_iters='', dataset='CelebA', batch_size=1, num_iters=200000, num_iters_decay=100000, g_lr=0.0001, d_lr=0.0001, n_critic=5, beta1=0.5, beta2=0.999, selected_attrs=['Black_Hair', 'Blond_Hair', 'Brown_Hair', 'Male', 'Young'], test_iters=200000, num_workers=1, mode='test', use_tensorboard=0, model_save_dir='./stargan/stargan_celeba_256/models', result_dir='./stargan/stargan_celeba_256/results_test', log_step=10, sample_step=1000, model_save_step=5000, lr_update_step=1000, data_path='./data/img_align_celeba', attr_path='./data/list_attr_celeba.txt', img_size=256, num_test=10, gpu=1, universal=1, log_dir='./stargan/stargan/logs', sample_dir='./stargan/stargan/samples'), AttentionGAN=Namespace(c_dim=5, c2_dim=8, celeba_crop_size=178, rafd_crop_size=256, image_size=256, g_conv_dim=64, d_conv_dim=64, g_repeat_num=6, d_repeat_num=6, lambda_cls=1, lambda_rec=10, lambda_gp=10, resume_iters='', dataset='CelebA', batch_size=1, num_iters=200000, num_iters_decay=100000, g_lr=0.0001, d_lr=0.0001, n_critic=5, beta1=0.5, beta2=0.999, selected_attrs=['Black_Hair', 'Blond_Hair', 'Brown_Hair', 'Male', 'Young'], test_iters=200000, num_workers=1, mode='test', use_tensorboard=0, model_save_dir='./AttentionGAN/AttentionGAN_v1_multi/checkpoints/celeba_256_pretrained', result_dir='./AttentionGAN/AttentionGAN_v1_multi//stargan_celeba_256/results_test', log_step=10, sample_step=1000, model_save_step=5000, lr_update_step=1000, data_path='./data/img_align_celeba', attr_path='./data/list_attr_celeba.txt', img_size=256, num_test=10, gpu=1, universal=1, log_dir='./attentiongan/attentiongan/logs', sample_dir='./attentiongan/attentiongan/samples'))
experiment dir is created
experiment config is saved
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1          [4, 64, 128, 128]           3,072
       BatchNorm2d-2          [4, 64, 128, 128]             128
         LeakyReLU-3          [4, 64, 128, 128]               0
       Conv2dBlock-4          [4, 64, 128, 128]               0
            Conv2d-5           [4, 128, 64, 64]         131,072
       BatchNorm2d-6           [4, 128, 64, 64]             256
         LeakyReLU-7           [4, 128, 64, 64]               0
       Conv2dBlock-8           [4, 128, 64, 64]               0
            Conv2d-9           [4, 256, 32, 32]         524,288
      BatchNorm2d-10           [4, 256, 32, 32]             512
        LeakyReLU-11           [4, 256, 32, 32]               0
      Conv2dBlock-12           [4, 256, 32, 32]               0
           Conv2d-13           [4, 512, 16, 16]       2,097,152
      BatchNorm2d-14           [4, 512, 16, 16]           1,024
        LeakyReLU-15           [4, 512, 16, 16]               0
      Conv2dBlock-16           [4, 512, 16, 16]               0
           Conv2d-17            [4, 1024, 8, 8]       8,388,608
      BatchNorm2d-18            [4, 1024, 8, 8]           2,048
        LeakyReLU-19            [4, 1024, 8, 8]               0
      Conv2dBlock-20            [4, 1024, 8, 8]               0
  ConvTranspose2d-21          [4, 1024, 16, 16]      16,990,208
      BatchNorm2d-22          [4, 1024, 16, 16]           2,048
             ReLU-23          [4, 1024, 16, 16]               0
ConvTranspose2dBlock-24          [4, 1024, 16, 16]               0
  ConvTranspose2d-25           [4, 512, 32, 32]      12,582,912
      BatchNorm2d-26           [4, 512, 32, 32]           1,024
             ReLU-27           [4, 512, 32, 32]               0
ConvTranspose2dBlock-28           [4, 512, 32, 32]               0
  ConvTranspose2d-29           [4, 256, 64, 64]       2,097,152
      BatchNorm2d-30           [4, 256, 64, 64]             512
             ReLU-31           [4, 256, 64, 64]               0
ConvTranspose2dBlock-32           [4, 256, 64, 64]               0
  ConvTranspose2d-33         [4, 128, 128, 128]         524,288
      BatchNorm2d-34         [4, 128, 128, 128]             256
             ReLU-35         [4, 128, 128, 128]               0
ConvTranspose2dBlock-36         [4, 128, 128, 128]               0
  ConvTranspose2d-37           [4, 3, 256, 256]           6,147
             Tanh-38           [4, 3, 256, 256]               0
ConvTranspose2dBlock-39           [4, 3, 256, 256]               0
================================================================
Total params: 43,352,707
Trainable params: 43,352,707
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 39.00
Forward/backward pass size (MB): 746.00
Params size (MB): 165.38
Estimated Total Size (MB): 950.38
----------------------------------------------------------------
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1          [4, 64, 128, 128]           3,072
    InstanceNorm2d-2          [4, 64, 128, 128]             128
         LeakyReLU-3          [4, 64, 128, 128]               0
       Conv2dBlock-4          [4, 64, 128, 128]               0
            Conv2d-5           [4, 128, 64, 64]         131,072
    InstanceNorm2d-6           [4, 128, 64, 64]             256
         LeakyReLU-7           [4, 128, 64, 64]               0
       Conv2dBlock-8           [4, 128, 64, 64]               0
            Conv2d-9           [4, 256, 32, 32]         524,288
   InstanceNorm2d-10           [4, 256, 32, 32]             512
        LeakyReLU-11           [4, 256, 32, 32]               0
      Conv2dBlock-12           [4, 256, 32, 32]               0
           Conv2d-13           [4, 512, 16, 16]       2,097,152
   InstanceNorm2d-14           [4, 512, 16, 16]           1,024
        LeakyReLU-15           [4, 512, 16, 16]               0
      Conv2dBlock-16           [4, 512, 16, 16]               0
           Conv2d-17            [4, 1024, 8, 8]       8,388,608
   InstanceNorm2d-18            [4, 1024, 8, 8]           2,048
        LeakyReLU-19            [4, 1024, 8, 8]               0
      Conv2dBlock-20            [4, 1024, 8, 8]               0
           Linear-21                  [4, 1024]      67,109,888
             ReLU-22                  [4, 1024]               0
      LinearBlock-23                  [4, 1024]               0
           Linear-24                     [4, 1]           1,025
      LinearBlock-25                     [4, 1]               0
           Linear-26                  [4, 1024]      67,109,888
             ReLU-27                  [4, 1024]               0
      LinearBlock-28                  [4, 1024]               0
           Linear-29                    [4, 13]          13,325
      LinearBlock-30                    [4, 13]               0
================================================================
Total params: 145,382,286
Trainable params: 145,382,286
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 3.00
Forward/backward pass size (MB): 248.19
Params size (MB): 554.59
Estimated Total Size (MB): 805.78
----------------------------------------------------------------
Find model of latest epoch: .\AttGAN\output\256_shortcut1_inject0_none\checkpoint\weights.199.pth
Selesai mempersiapkan dataset CelebA...
Testing images: 500
Selesai mempersiapkan dataset CelebA...
Testing images: 500
Generator(
  (main): Sequential(
    (0): Conv2d(8, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (16): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
    (18): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (19): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (20): ReLU(inplace=True)
    (21): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (22): Tanh()
  )
)
G
The number of parameters: 8430528
Discriminator(
  (main): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv2d(512, 1024, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv2d(1024, 2048, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (conv1): Conv2d(2048, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv2): Conv2d(2048, 5, kernel_size=(4, 4), stride=(1, 1), bias=False)
)
D
The number of parameters: 44884928
Loading the trained models from step 200000...
Generator(
  (main): Sequential(
    (0): Conv2d(8, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (16): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
    (18): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (19): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (20): ReLU(inplace=True)
    (21): Conv2d(64, 4, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
  )
)
G
The number of parameters: 8433664
Discriminator(
  (main): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv2d(512, 1024, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv2d(1024, 2048, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (conv1): Conv2d(2048, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv2): Conv2d(2048, 5, kernel_size=(4, 4), stride=(1, 1), bias=False)
)
D
The number of parameters: 44884928
Loading the trained models from step 200000...
Finished deepfake models initialization!
finished init the attacked models, only attack 2 epochs
  0%|                                                                                                                                                                                                      | 0/500 [00:00<?, ?it/s]C:\anaconda3\envs\fake\lib\site-packages\torch\nn\functional.py:1967: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.
  warnings.warn("nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.")
save the CMUA-Watermark
  0%|▍                                                                                                                                                                                           | 1/500 [00:52<7:14:52, 52.29s/it]save the CMUA-Watermark
  0%|▊                                                                                                                                                                                           | 2/500 [01:29<5:59:11, 43.28s/it]save the CMUA-Watermark
  1%|█▏                                                                                                                                                                                          | 3/500 [02:06<5:35:25, 40.49s/it]save the CMUA-Watermark
  1%|█▌                                                                                                                                                                                          | 4/500 [02:44<5:25:31, 39.38s/it]save the CMUA-Watermark
  1%|█▉                                                                                                                                                                                          | 5/500 [03:22<5:21:04, 38.92s/it]save the CMUA-Watermark
  1%|██▎                                                                                                                                                                                         | 6/500 [04:00<5:18:38, 38.70s/it]save the CMUA-Watermark
  1%|██▋                                                                                                                                                                                         | 7/500 [04:38<5:17:24, 38.63s/it]save the CMUA-Watermark
  2%|███                                                                                                                                                                                         | 8/500 [05:17<5:16:28, 38.59s/it]save the CMUA-Watermark
  2%|███▍                                                                                                                                                                                        | 9/500 [05:56<5:15:58, 38.61s/it]save the CMUA-Watermark
  2%|███▋                                                                                                                                                                                       | 10/500 [06:34<5:15:48, 38.67s/it]save the CMUA-Watermark
  2%|████                                                                                                                                                                                       | 11/500 [07:13<5:15:49, 38.75s/it]save the CMUA-Watermark
  2%|████▍                                                                                                                                                                                      | 12/500 [07:53<5:16:06, 38.87s/it] 